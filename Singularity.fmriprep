BootStrap: shub
From: shub://willgpaik/ubuntu_aci:1804

%setup
    
%files

%environment 

%runscript
    exec /usr/local/miniconda/bin/fmriprep

%post
    # Link directories
    mkdir -p /storage/home
    mkdir -p /storage/work
    mkdir -p /gpfs/scratch
    mkdir -p /gpfs/group
    mkdir -p /var/spool/torque
    
    # Prepare environment
    apt-get update && \
    curl -sL https://deb.nodesource.com/setup_10.x | bash - && \
    apt-get install -y --no-install-recommends \
                    nodejs && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    
    # Install latest pandoc
    curl -o pandoc-2.2.2.1-1-amd64.deb -sSL "https://github.com/jgm/pandoc/releases/download/2.2.2.1/pandoc-2.2.2.1-1-amd64.deb" && \
    dpkg -i pandoc-2.2.2.1-1-amd64.deb && \
    rm pandoc-2.2.2.1-1-amd64.deb
    
    
    # Installing freesurfer
    curl -sSL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.1/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.1.tar.gz | tar zxv --no-same-owner -C /opt \
    --exclude='freesurfer/diffusion' \
    --exclude='freesurfer/docs' \
    --exclude='freesurfer/fsfast' \
    --exclude='freesurfer/lib/cuda' \
    --exclude='freesurfer/lib/qt' \
    --exclude='freesurfer/matlab' \
    --exclude='freesurfer/mni/share/man' \
    --exclude='freesurfer/subjects/fsaverage_sym' \
    --exclude='freesurfer/subjects/fsaverage3' \
    --exclude='freesurfer/subjects/fsaverage4' \
    --exclude='freesurfer/subjects/cvs_avg35' \
    --exclude='freesurfer/subjects/cvs_avg35_inMNI152' \
    --exclude='freesurfer/subjects/bert' \
    --exclude='freesurfer/subjects/lh.EC_average' \
    --exclude='freesurfer/subjects/rh.EC_average' \
    --exclude='freesurfer/subjects/sample-*.mgz' \
    --exclude='freesurfer/subjects/V1_average' \
    --exclude='freesurfer/trctrain'

export FSL_DIR="/usr/share/fsl/5.0" \
    OS="Linux" \
    FS_OVERRIDE=0 \
    FIX_VERTEX_AREA="" \
    FSF_OUTPUT_FORMAT="nii.gz" \
    FREESURFER_HOME="/opt/freesurfer"
export SUBJECTS_DIR="$FREESURFER_HOME/subjects" \
    FUNCTIONALS_DIR="$FREESURFER_HOME/sessions" \
    MNI_DIR="$FREESURFER_HOME/mni" \
    LOCAL_DIR="$FREESURFER_HOME/local" \
    MINC_BIN_DIR="$FREESURFER_HOME/mni/bin" \
    MINC_LIB_DIR="$FREESURFER_HOME/mni/lib" \
    MNI_DATAPATH="$FREESURFER_HOME/mni/data"
export PERL5LIB="$MINC_LIB_DIR/perl5/5.8.5" \
    MNI_PERL5LIB="$MINC_LIB_DIR/perl5/5.8.5" \
    PATH="$FREESURFER_HOME/bin:$FSFAST_HOME/bin:$FREESURFER_HOME/tktools:$MINC_BIN_DIR:$PATH"
    
    
    # Installing Neurodebian packages (FSL, AFNI, git)
    # http://neuro.debian.net/install_pkg.html?p=fsl-core
    wget -O- http://neuro.debian.net/lists/bionic.us-nh.full | tee /etc/apt/sources.list.d/neurodebian.sources.list
    apt-key add /usr/local/etc/neurodebian.gpg && \
    (apt-key adv --refresh-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9 || true)
    apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9

    apt-get update && \
    apt-get install -y --no-install-recommends \
                    fsl-core=5.0.9-5~nd18.04+1 \
                    afni=18.0.05+git24-gb25b21054~dfsg.1-1~nd17.10+1+nd18.04+1 \
                    convert3d \
                    git-annex-standalone && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

export FSLDIR="/usr/share/fsl/5.0" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    POSSUMDIR="/usr/share/fsl/5.0" \
    LD_LIBRARY_PATH="/usr/lib/fsl/5.0:$LD_LIBRARY_PATH" \
    FSLTCLSH="/usr/bin/tclsh" \
    FSLWISH="/usr/bin/wish" \
    AFNI_MODELPATH="/usr/lib/afni/models" \
    AFNI_IMSAVE_WARNINGS="NO" \
    AFNI_TTATLAS_DATASET="/usr/share/afni/atlases" \
    AFNI_PLUGINPATH="/usr/lib/afni/plugins"
export PATH="/usr/lib/fsl/5.0:/usr/lib/afni/bin:$PATH"


    # Installing ANTs 2.2.0 (NeuroDocker build)
export ANTSPATH=/usr/lib/ants
    mkdir -p $ANTSPATH && \
    curl -sSL "https://dl.dropbox.com/s/2f4sui1z6lcgyek/ANTs-Linux-centos5_x86_64-v2.2.0-0740f91.tar.gz" \
    | tar -xzC $ANTSPATH --strip-components 1
export PATH=$ANTSPATH:$PATH


    # Create a shared $HOME directory
    useradd -m -s /bin/bash -G users fmriprep
    mkdir -p /home/fmriprep
export HOME="/home/fmriprep"
    cd $HOME

    # Installing SVGO
    curl -sL https://deb.nodesource.com/setup_10.x | bash -
    apt-get install -y nodejs
    npm install -g svgo


    # Installing bids-validator
    npm install -g bids-validator@1.2.3

    # Installing SVGO
    curl -sL https://deb.nodesource.com/setup_10.x | bash -
    apt-get install -y nodejs
    npm install -g svgo


    # Installing bids-validator
    npm install -g bids-validator@1.2.3

    # Installing and setting up ICA_AROMA
    mkdir -p /opt/ICA-AROMA && \
    curl -sSL "https://github.com/maartenmennes/ICA-AROMA/archive/v0.4.4-beta.tar.gz" \
    | tar -xzC /opt/ICA-AROMA --strip-components 1 && \
    chmod +x /opt/ICA-AROMA/ICA_AROMA.py

export PATH=/opt/ICA-AROMA:$PATH

    # Installing and setting up miniconda
    curl -sSLO https://repo.continuum.io/miniconda/Miniconda3-4.5.11-Linux-x86_64.sh && \
    bash Miniconda3-4.5.11-Linux-x86_64.sh -b -p /usr/local/miniconda && \
    rm Miniconda3-4.5.11-Linux-x86_64.sh


    # Set CPATH for packages relying on compiled libs (e.g. indexed_gzip)
export PATH="/usr/local/miniconda/bin:$PATH" \
    CPATH="/usr/local/miniconda/include/:$CPATH" \
    LANG="C.UTF-8" \
    LC_ALL="C.UTF-8" \
    PYTHONNOUSERSITE=1

    # Installing precomputed python packages
    conda install -y conda-build \
                     python=3.7.1 \
                     pip=19.1 \
                     mkl=2018.0.3 \
                     mkl-service \
                     numpy=1.15.4 \
                     scipy=1.1.0 \
                     scikit-learn=0.19.1 \
                     matplotlib=2.2.2 \
                     pandas=0.23.4 \
                     libxml2=2.9.8 \
                     libxslt=1.1.32 \
                     graphviz=2.40.1 \
                     traits=4.6.0 \
                     zlib; sync && \
    chmod -R a+rX /usr/local/miniconda; sync && \
    chmod +x /usr/local/miniconda/bin/*; sync && \
    conda build purge-all; sync && \
    conda clean -tipsy && sync
    
    
    # Unless otherwise specified each process should only use one thread - nipype
    # will handle parallelization
export MKL_NUM_THREADS=1 \
    OMP_NUM_THREADS=1

    # Precaching fonts, set 'Agg' as default backend for matplotlib
    python -c "from matplotlib import font_manager" && \
    sed -i 's/\(backend *: \).*$/\1Agg/g' $( python -c "import matplotlib; print(matplotlib.matplotlib_fname())" )

    # Precaching atlases
export TEMPLATEFLOW_HOME="/opt/templateflow"
    mkdir -p $TEMPLATEFLOW_HOME
    pip install duecredit
    pip install --no-cache-dir "templateflow>=0.1.3,<0.2.0a0" && \
    python -c "from templateflow import api as tfapi; \
               tfapi.get('MNI152NLin6Asym'); \
               tfapi.get('MNI152NLin2009cAsym'); \
               tfapi.get('OASIS30ANTs');" && \
    find $TEMPLATEFLOW_HOME -type d -exec chmod go=u {} + && \
    find $TEMPLATEFLOW_HOME -type f -exec chmod go=u {} +


    # Installing FMRIPREP
    #mkdir -p /src/fmriprep
    #cp -r . /src/fmriprep
    #pip install --no-cache-dir "/src/fmriprep"
    pip install --no-cache-dir fmriprep

    #install -m 0755 \
    #/src/fmriprep/scripts/generate_reference_mask.py \
    #/usr/local/bin/generate_reference_mask

    find $HOME -type d -exec chmod go=u {} + && \
    find $HOME -type f -exec chmod go=u {} +
